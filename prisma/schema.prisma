// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Choose your database provider (e.g., PostgreSQL, MySQL, SQLite, MongoDB)
  // For this example, let's assume PostgreSQL
  provider = "postgresql"
  url      = env("DATABASE_URL") // Store your database connection string in a .env file
}

// Represents a user of your application
model User {
  id        String      @id @default(uuid()) // Unique identifier for the user
  email     String      @unique // User's email address (must be unique)
  password  String      // Reverted to non-optional for standard auth
  name      String?     // For user's name, potentially from Google
  profileImageUrl String? // For user's profile picture, potentially from Google
  googleId  String?     @unique // For storing Google User ID

  authProvider String @default("email") // To track how the user signed up

  createdAt DateTime    @default(now()) // Timestamp when the user was created
  updatedAt DateTime    @updatedAt // Timestamp when the user record was last updated

  // Relationship to the Subscription model (one user can have one active subscription)
  subscription Subscription? // A user can optionally have one subscription

  // Relationship to Favorite affirmations
  favorites Favorite[]

  // Notification relationships
  notificationTokens NotificationToken[]
  scheduledNotifications ScheduledNotification[]
  notificationHistory NotificationHistory[]

  @@map("users") // Maps the model name User to a table name "users" in the database
}

// Represents a user's subscription
model Subscription {
  id                String    @id @default(uuid()) // Unique identifier for the subscription record
  userId            String    @unique // Foreign key linking to the User model (one-to-one relationship)
  user              User      @relation(fields: [userId], references: [id]) // Defines the relationship back to the User model

  status            String    // Current status of the subscription (e.g., "active", "cancelled", "expired", "trialing")
  plan              String    // The subscription plan (e.g., "premium_monthly", "premium_yearly")
  startDate         DateTime  // The date the subscription started
  endDate           DateTime? // The date the subscription is scheduled to end (null for active, non-expiring)
  renewalDate       DateTime? // The next date the subscription is scheduled to renew

  // Fields related to the payment gateway (e.g., PhonePe)
  paymentGateway    String    // The payment gateway used (e.g., "phonepe")
  gatewaySubscriptionId String? // The ID of the subscription in the payment gateway's system (if applicable)
  gatewayCustomerId String? // The ID of the customer in the payment gateway's system

  createdAt         DateTime  @default(now()) // Timestamp when the subscription record was created
  updatedAt         DateTime  @updatedAt // Timestamp when the subscription record was last updated

  // Add other subscription-related fields as needed (e.g., frequency, trial_ends_at)
  // frequency Int? // Could store the notification frequency here if it's tied to the subscription plan
  // trialEndsAt DateTime?

  @@map("subscriptions") // Maps the model name Subscription to a table name "subscriptions"
}

// Represents an affirmation
model Affirmation {
  id        String   @id @default(uuid())
  text      String
  category  String   @default("General")
  author    String?
  isPremium Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  dailyAffirmations       DailyAffirmation[]
  userDailyAffirmations   UserDailyAffirmation[]

  @@map("affirmations")
}

// Represents the global daily affirmation
model DailyAffirmation {
  id            String     @id @default(uuid())
  date          String     // Store as YYYY-MM-DD
  affirmationId String
  affirmation   Affirmation @relation(fields: [affirmationId], references: [id])
  createdAt     DateTime   @default(now())

  @@unique([date]) // Only one global affirmation per day
  @@map("daily_affirmations")
}

// Represents a user's personal daily affirmation
model UserDailyAffirmation {
  id            String     @id @default(uuid())
  userId        String
  date          String     // Store as YYYY-MM-DD
  affirmationId String
  affirmation   Affirmation @relation(fields: [affirmationId], references: [id])
  createdAt     DateTime   @default(now())

  @@unique([userId, date]) // Only one affirmation per user per day
  @@map("user_daily_affirmations")
}

// Represents a user's favorite affirmation
model Favorite {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  affirmationId String   // This will store the ID of the affirmation from affirmations.json
  createdAt     DateTime @default(now())

  @@unique([userId, affirmationId]) // Ensures a user cannot favorite the same affirmation multiple times
  @@map("favorites")
}

// Notification system tables
model NotificationToken {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token      String   @unique
  platform   String   // 'ios', 'android', 'web'
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("notification_tokens")
}

model ScheduledNotification {
  id                String   @id @default(uuid())
  userId            String?  // null for global notifications
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title             String
  body              String
  data              Json?    // Additional data as JSON
  scheduledFor      DateTime
  timezone          String   @default("UTC")
  isRecurring       Boolean  @default(false)
  recurringPattern  String?  // 'daily', 'weekly', 'monthly', or cron expression
  isActive          Boolean  @default(true)
  lastSent          DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("scheduled_notifications")
}

model NotificationHistory {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title            String
  body             String
  data             Json?
  sentAt           DateTime @default(now())
  status           String   // 'sent', 'delivered', 'failed', 'read'
  expoReceiptId    String?  // For tracking Expo notification status
  failureReason    String?
  scheduledNotificationId String? // Reference to the scheduled notification that triggered this

  @@map("notification_history")
}

// You might also consider a Payment model to log individual transactions
// model Payment {
//   id String @id @default(uuid())
//   userId String
//   user User @relation(fields: [userId], references: [id])
//   amount Float // Payment amount
//   currency String // Currency code (e.g., "INR")
//   status String // Payment status (e.g., "successful", "failed", "pending")
//   gatewayPaymentId String? // The payment ID from the gateway
//   createdAt DateTime @default(now())
//   @@map("payments")
// }

